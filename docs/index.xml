<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
      <title>nerdypepper's μblog</title>
      <link>https://peppe.rs</link>
      <description>programming, design, software</description>
      <atom:link href="https://peppe.rs/index.xml" rel="self" type="application/rss+xml" />
      <image>
        <title>nerdypepper's μblog</title>
        <url>https://u.peppe.rs/n.png</url>
        <link>https://peppe.rs</link>
      </image>
      <language>en-us</language>
      <copyright>Creative Commons BY-NC-SA 4.0</copyright>
      <item>
<title>Font Size Fallacies</title>
<description><p>I am not an expert with fonts, but I do have some
experience <sup id="fnref1"><a href="#fn1" rel="footnote">1</a></sup>, and common sense. This post aims to debunk some
misconceptions about font sizes!</p>

<p>11 px on your display is <em>probably not</em> 11 px on my display.
Let&#39;s do some quick math. I have two displays, 1366x768 @
21&#8221; and another with 1920x1080 @ 13&#8221;, call them <code>A</code> and
<code>B</code> for now.</p>

<p>Display <code>A</code> has 1,049,088 pixels. A pixel is a square, of
side say, <code>s</code> cm. The total area covered by my 21&#8221; display
is about 1,066 cm<sup>2</sup> (41x26). Thus,</p>

<pre><code>Display A
Dimensions: 1366x768 @ 21&#34; (41x26 sq. cm)
1,049,088 s^2 = 1066
            s = 0.0318 cm (side of a pixel on Display A)
</code></pre>

<p>Bear with me, as I repeat the number crunching for Display
<code>B</code>:</p>

<pre><code>Display B
Dimensions: 1920x1080 @ 13&#34; (29.5x16.5 sq. cm)
2,073,600 s^2 = 486.75
            s = 0.0153 cm (side of a pixel on Display B)
</code></pre>

<p>The width of a pixel on Display <code>A</code> is <em>double</em> the width of a
pixel on Display <code>B</code>. The area occupied by a pixel on Display
<code>A</code> is <em>4 times</em> the area occupied by a pixel on Display <code>B</code>.</p>

<p><em>The size of a pixel varies from display to display!</em></p>

<p>A 5x11 bitmap font on Display <code>A</code> would be around 4 mm tall
whereas the same bitmap font on Display <code>B</code> would be around
1.9 mm tall. A 11 px tall character on <code>B</code> is visually
equivalent to a 5 px character on <code>A</code>. When you view a
screenshot of Display <code>A</code> on Display <code>B</code>, the contents are
shrunk down by a factor of 2!</p>

<p>So screen resolution is not enough, how else do we measure
size? Pixel Density! Keen readers will realize that the 5<sup>th</sup>
grade math problem we solved up there showcases pixel
density, or, pixels per cm (PPCM). Usually we deal with
pixels per inch (PPI).</p>

<p><strong>Note:</strong> PPI is not to be confused with DPI <sup id="fnref2"><a href="#fn2" rel="footnote">2</a></sup> (dots
per inch). DPI is defined for printers.</p>

<p>In our example, <code>A</code> is a 75 ppi display and <code>B</code> is around
165 ppi <sup id="fnref3"><a href="#fn3" rel="footnote">3</a></sup>.  A low ppi display appears to be
&#8216;pixelated&#8217;, because the pixels are more prominent, much
like Display <code>A</code>. A higher ppi usually means you can view
larger images and render crispier fonts. The average desktop
display can stuff 100-200 pixels per inch. Smart phones
usually fall into the 400-600 ppi (XXXHDPI) category. The
human eye fails to differentiate detail past 300 ppi.</p>

<p><em>So &#8230; streaming an 8K video on a 60&#8221; TV provides the same
clarity as a HD video on a smart phone?</em></p>

<p>Absolutely. Well, clarity is subjective, but the amount of
detail you can discern on mobile displays has always been
limited.  Salty consumers of the Xperia 1 <sup id="fnref4"><a href="#fn4" rel="footnote">4</a></sup> will say
otherwise.</p>

<p>Maybe I will talk about font rendering in another post, but
thats all for now. Don&#39;t judge a font size by its
screenshot.</p>

<div class="footnotes">
<hr/>
<ol>

<li id="fn1">
<p><a href="https://github.com/nerdypepper/scientifica">https:&#47;&#47;github.com&#47;nerdypepper&#47;scientifica</a>&#160;<a href="#fnref1" rev="footnote">&#8617;</a></p>
</li>

<li id="fn2">
<p><a href="https://en.wikipedia.org/wiki/Dots_per_inch">https:&#47;&#47;en.wikipedia.org&#47;wiki&#47;Dots_per_inch</a>&#160;<a href="#fnref2" rev="footnote">&#8617;</a></p>
</li>

<li id="fn3">
<p><a href="https://www.sven.de/dpi/">https:&#47;&#47;www.sven.de&#47;dpi&#47;</a>&#160;<a href="#fnref3" rev="footnote">&#8617;</a></p>
</li>

<li id="fn4">
<p><a href="https://en.wikipedia.org/wiki/Sony_Xperia_1">https:&#47;&#47;en.wikipedia.org&#47;wiki&#47;Sony_Xperia_1</a>&#160;<a href="#fnref4" rev="footnote">&#8617;</a></p>
</li>

</ol>
</div></description>
<link>https://peppe.rs/posts/font_size_fallacies/</link>
<pubDate>Tue, 17 Mar 2020 16:52:00 +0000</pubDate>
<guid>https://peppe.rs/posts/font_size_fallacies/</guid>
</item>
<item>
<title>Termux Tandem</title>
<description><p>I learnt about <code>termux</code> from a friend on IRC recently.
It looked super gimmicky to me at first, but it eventually
proved to be useful. Here&#39;s what I use it for:</p>

<h3 id="rsync">rsync</h3>

<p>Ever since I degoogled my android device, syncing files
between my phone and my PC has always been a pain. I&#8217;m
looking at you MTP. But, with <code>termux</code> and <code>sshd</code> all set up,
it&#39;s as simple as:</p>

<pre><code>$ arp
Address         HWtype  HWad ...
192.168.43.187  ether   d0:0 ...

$ rsync -avz 192.168.43.187:~&#47;frogs ~&#47;pics&#47;frogs
</code></pre>

<h3 id="ssh%20&amp;#38;%20tmux">ssh &#38; tmux</h3>

<p>My phone doubles as a secondary view into my main machine
with <code>ssh</code> and <code>tmux</code>. When I am away from my PC (read:
sitting across the room), I check build status and IRC
messages by <code>ssh</code>ing into a tmux session running the said
build or weechat.</p>

<h3 id="file%20uploads">file uploads</h3>

<p>Not being able to access my (ssh-only) file host was
crippling. With a <code>bash</code> instance on my phone, I just copied
over my ssh keys, and popped in a file upload script (a
glorified <code>scp</code>). Now I just have to figure out a way to
clean up these file names &#8230;</p>

<pre><code>~&#47;storage&#47;pictures&#47; $ ls
02muf5g7b2i41.jpg  7alt3cwg77841.jpg  cl4bsrge7id11.png
mtZabXG.jpg        p8d5c584f2841.jpg  vjUxGjq.jpg
</code></pre>

<h3 id="cmus">cmus</h3>

<p>Alright, I don&#39;t really listen to music via <code>cmus</code>, but I
did use it a couple times when my default music player was
acting up. <code>cmus</code> is a viable option:</p>

<p><a href="https://u.peppe.rs/CP.jpg"><img src="https://u.peppe.rs/CP.jpg" alt="cmus.png" /></a></p></description>
<link>https://peppe.rs/posts/termux_tandem/</link>
<pubDate>Sun, 08 Mar 2020 16:47:00 +0000</pubDate>
<guid>https://peppe.rs/posts/termux_tandem/</guid>
</item>
<item>
<title>Call To ARMs</title>
<description><p>My 4th semester involves ARM programming. And proprietary
tooling (Keil C). But we don&#39;t do that here.</p>

<h3 id="Building">Building</h3>

<p>Assembling and linking ARM binaries on non-ARM architecture
devices is fairly trivial. I went along with the GNU cross
bare metal toolchain binutils, which provides <code>arm-as</code> and
<code>arm-ld</code> (among a bunch of other utils that I don&#39;t care
about for now). </p>

<p>Assemble <code>.s</code> files with:</p>

<pre><code class="language-shell">arm-none-eabi-as main.s -g -march=armv8.1-a -o main.out
</code></pre>

<p>The <code>-g</code> flag generates extra debugging information that
<code>gdb</code> picks up. The <code>-march</code> option establishes target
architecture.</p>

<p>Link <code>.o</code> files with:</p>

<pre><code class="language-shell">arm-none-eabi-ld main.out -o main
</code></pre>

<h3 id="Running%20(and%20Debugging)">Running (and Debugging)</h3>

<p>Things get interesting here. <code>gdb</code> on your x86 machine
cannot read nor execute binaries compiled for ARM. So, we
simulate an ARM processor using <code>qemu</code>. Now qemu allows you
to run <code>gdbserver</code> on startup. Connecting our local <code>gdb</code>
instance to <code>gdbserver</code> gives us a view into the program&#8217;s
execution. Easy!</p>

<p>Run <code>qemu</code>, with <code>gdbserver</code> on port <code>1234</code>, with our ARM
binary, <code>main</code>:</p>

<pre><code class="language-shell">qemu-arm -singlestep -g 1234 main
</code></pre>

<p>Start up <code>gdb</code> on your machine, and connect to <code>qemu</code>&#8217;s
<code>gdbserver</code>:</p>

<pre><code>(gdb) set architecture armv8-a
(gdb) target remote localhost:1234
(gdb) file main
Reading symbols from main...  # yay!
</code></pre>

<h3 id="GDB%20Enhanced">GDB Enhanced</h3>

<p><code>gdb</code> is cool, but it&#39;s not nearly as comfortable as well
fleshed out emulators&#47;IDEs like Keil. Watching registers,
CPSR and memory chunks update <em>is</em> pretty fun. </p>

<p>I came across <code>gdb</code>&#39;s TUI mode (hit <code>C-x C-a</code> or type <code>tui
enable</code> at the prompt). TUI mode is a godsend. It highlights
the current line of execution, shows you disassembly
outputs, updated registers, active breakpoints and more.</p>

<p><em>But</em>, it is an absolute eyesore.</p>

<p>Say hello to <a href="https://github.com/hugsy/gef">GEF</a>! &#8220;GDB
Enhanced Features&#8221; teaches our old dog some cool new tricks.
Here are some additions that made my ARM debugging
experience loads better:</p>

<ul>
<li>Memory watches</li>
<li>Register watches, with up to 7 levels of deref (overkill,
I agree)</li>
<li>Stack tracing</li>
</ul>

<p>And it&#39;s pretty! See for yourself:</p>

<p><a href="https://u.peppe.rs/wq.png"><img src="https://u.peppe.rs/wq.png" alt="gef.png" /></a></p>

<h3 id="Editing">Editing</h3>

<p>Vim, with <code>syntax off</code> because it
dosen&#39;t handle GNU ARM syntax too well.</p></description>
<link>https://peppe.rs/posts/call_to_ARMs/</link>
<pubDate>Fri, 07 Feb 2020 18:30:00 +0000</pubDate>
<guid>https://peppe.rs/posts/call_to_ARMs/</guid>
</item>
<item>
<title>Color Conundrum</title>
<description><p>This piece aims to highlight (pun intended) some of the
reasons behind my <a href="https://u.peppe.rs/bF.png">color
free</a> editor setup.</p>

<p>Imagine highlighting an entire book because <em>all</em> of it is
important. That is exactly what (most) syntax highlighting
does. It is difficult for the human eye to filter out noise
in rainbow barf. Use color to draw attention, not diverge
it.</p>

<p>At the same time, a book devoid of color is <em>boring!</em> What
is the takeaway from this 10 line paragraph? What are the
technical terms used?</p>

<p>Prose and code are certainly different, but the fickle
minded human eye is the same. The eye constantly looks for a
frame of reference, a focal point. It grows tired when it
can&#39;t find one.</p>

<p>The following comparison does a better job of explaining
(none, ample and over-the-top highlighting, from left to
right):</p>

<p><a href="https://u.peppe.rs/lt.png"><img src="https://u.peppe.rs/lt.png" alt="hi.png" /></a></p>

<p>Without highlighting (far left), it is hard to differentiate
between comments and code! The florid color scheme (far
right) is no good either, it contains too many attention
grabbers. The center sample is a healthy balance of both.
Function calls and constants stand out, and repetitive
keywords and other noise (<code>let</code>, <code>as</code>) are mildly dimmed
out. Comments and non-code text (sign column, status text)
are dimmed further.</p>

<p>I&#39;ll stop myself before I rant about color contrast and
combinations.</p></description>
<link>https://peppe.rs/posts/color_conundrum/</link>
<pubDate>Mon, 30 Dec 2019 18:30:00 +0000</pubDate>
<guid>https://peppe.rs/posts/color_conundrum/</guid>
</item>
<item>
<title>Static Sites With Bash</title>
<description><p>After going through a bunch of static site generators
(<a href="https://blog.getpelican.com/">pelican</a>,
<a href="https://gohugo.io">hugo</a>,
<a href="https://github.com/icyphox/vite">vite</a>), I decided to roll
my own. If you are more of the &#8216;show me the code&#8217; kinda guy,
<a href="https://github.com/nerdypepper/site">here</a> you go.</p>

<h3 id="Text%20formatting">Text formatting</h3>

<p>I chose to write in markdown, and convert
to html with <a href="https://kristaps.bsd.lv/lowdown/">lowdown</a>.</p>

<h3 id="Directory%20structure">Directory structure</h3>

<p>I host my site on GitHub pages, so
<code>docs&#47;</code> has to be the entry point. Markdown formatted posts
go into <code>posts&#47;</code>, get converted into html, and end up in
<code>docs&#47;index.html</code>, something like this:</p>

<pre><code>posts=$(ls -t .&#47;posts)     # chronological order!
for f in $posts; do
    file=&#34;.&#47;posts&#47;&#34;$f      # `ls` mangled our file paths
    echo &#34;generating post $file&#34;

    html=$(lowdown &#34;$file&#34;)
    echo -e &#34;html&#34; &#62;&#62; docs&#47;index.html
done
</code></pre>

<h3 id="Assets">Assets</h3>

<p>Most static site generators recommend dropping image
assets into the site source itself. That does have it&#8217;s
merits, but I prefer hosting images separately:</p>

<pre><code># strip file extension
ext=&#34;${1##*.}&#34;

# generate a random file name
id=$( cat &#47;dev&#47;urandom | tr -dc &#39;a-zA-Z0-9&#39; | fold -w 2 | head -n 1 )
id=&#34;$id.$ext&#34;

# copy to my file host
scp -P 443 &#34;$1&#34; emerald:files&#47;&#34;$id&#34; 
echo &#34;https:&#47;&#47;u.peppe.rs&#47;$id&#34;
</code></pre>

<h3 id="Templating">Templating</h3>

<p><a href="https://github.com/NerdyPepper/site/blob/master/generate.sh"><code>generate.sh</code></a>
brings the above bits and pieces together (with some extra
cruft to avoid javascript).  It uses <code>sed</code> to produce nice
titles from the file names (removes underscores,
title-case), and <code>date(1)</code> to add the date to each post
listing!</p></description>
<link>https://peppe.rs/posts/static_sites_with_bash/</link>
<pubDate>Fri, 22 Nov 2019 18:30:00 +0000</pubDate>
<guid>https://peppe.rs/posts/static_sites_with_bash/</guid>
</item>
<item>
<title>My Setup</title>
<description><p>Decided to do one of these because everyone does one of
these.</p>

<p><img src="https://u.peppe.rs/Hb.png" alt="scrot" /></p>

<p>My entire setup is managed with GNU <code>stow</code>, making it easier
to replicate on fresh installations. You can find my
configuration files on <a href="https://github.com/nerdypepper">GitHub</a>.</p>

<p>I run Void Linux (glibc) on my
<a href="https://store.hp.com/us/en/mdp/laptops/envy-13">HP Envy 13&#8221; (2018)</a>.
To keep things simple, I run a raw X session with <code>2bwm</code> as my
window manager, along with <code>dunst</code> (notification daemon) and
Sam&#39;s <a href="https://github.com/sdhand/compton"><code>compton</code></a>
(compositor) fork.</p>

<p>I am a fan of GNU tools, so I use <code>bash</code> as my shell, and
<code>coreutils</code> to manage files, archives, strings, paths etc. I
edit files with <code>vim</code>, chat with <code>weechat</code>, listen to music
with <code>cmus</code>, monitor processes with <code>htop</code>, manage sessions
with <code>tmux</code>, read pdfs in <code>zathura</code>. I rarely ever leave
the comfort of my terminal emulator, <code>urxvt</code>.</p>

<p>Most of my academic typesetting is done with TeX, and
compiled with <code>xelatex</code>. Other <em>fun</em> documents are made with
GIMP :).</p></description>
<link>https://peppe.rs/posts/my_setup/</link>
<pubDate>Wed, 06 Nov 2019 18:30:00 +0000</pubDate>
<guid>https://peppe.rs/posts/my_setup/</guid>
</item>
<item>
<title>WPA Woes</title>
<description><p>I finally got around to installing Void GNU&#47;Linux on my main
computer. Rolling release, non-systemd, need I say more?</p>

<p>As with all GNU&#47;Linux distributions, wireless networks had
me in a fix. If you can see this post, it means I&#39;ve managed
to get online. It turns out, <code>wpa_supplicant</code> was detecting the
wrong interface by default (does it ever select the right
one?). Let us fix that:</p>

<pre><code>$ sudo rm -r &#47;var&#47;service&#47;wpa_supplicant
$ sudo killall dhcpcd
</code></pre>

<p>What is the right interface though?</p>

<pre><code>$ iw dev
   ...
   Interface wlp2s0
   ...
</code></pre>

<p>Aha! Let us run <code>wpa_supplicant</code> on that interface, as a
background process:</p>

<pre><code>$ sudo wpa_supplicant -B -i wlp2s0 -c &#47;etc&#47;wpa_supplicant&#47;wpa_supplicant.conf
$ sudo dhcpcd -B wlp2s0
$ ping google.com
PING ...
</code></pre>

<p>Yay! Make those changes perpetual by enabling the service:</p>

<pre><code>------------------------------------------------------
# Add these to &#47;etc&#47;wpa_supplicant&#47;wpa_supplicant.conf
OPTS=&#34;-B&#34;
WPA_INTERFACE=&#34;wlp2s0&#34;
------------------------------------------------------
$ sudo ln -s &#47;etc&#47;sv&#47;wpa_supplicant &#47;var&#47;service&#47;
$ sudo ln -s &#47;etc&#47;sv&#47;dhcpcd &#47;var&#47;service&#47;
$ sudo sv restart wpa_supplicant
$ sudo sv restart dhcpcd
</code></pre></description>
<link>https://peppe.rs/posts/WPA_woes/</link>
<pubDate>Sat, 12 Oct 2019 16:18:00 +0000</pubDate>
<guid>https://peppe.rs/posts/WPA_woes/</guid>
</item>
<item>
<title>Bye Bye BDFs</title>
<description><p>Glyph Bitmap Distribution Format is no more, as the creators of
<a href="https://pango.org">Pango</a>, one of the most widely used text rendering
libraries,
<a href="https://blogs.gnome.org/mclasen/2019/05/25/pango-future-directions/">announced</a>
their plans for Pango 1.44.</p>

<p>Until recently, Pango used FreeType to draw fonts. They will be moving over
to <a href="https://harfbuzz.org">Harfbuzz</a>, an evolution of FreeType.</p>

<p><em>Why?</em></p>

<p>In short, FreeType was hard to work with. It required complex logic, and 
provided no advantage over Harfbuzz (other than being able to fetch
opentype metrics with ease).</p>

<p>Upgrading to Pango v1.44 will break your GTK applications (if you use a
<code>bdf</code>&#47;<code>pcf</code> bitmap font). Harfbuzz <em>does</em> support bitmap-only OpenType fonts,
<code>otb</code>s. Convert your existing fonts over to <code>otb</code>s using
<a href="https://fontforge.github.io">FontForge</a>. It is to be noted that applications
such as <code>xterm</code> and <code>rxvt</code> use <code>xft</code> (X FreeType) to render fonts, and will
remain unaffected by the update.</p>

<p>Both <a href="https://github.com/nerdypepper/scientifica">scientifica</a> and
<a href="https://github.com/nerdypepper/curie">curie</a> will soon ship with bitmap-only
OpenType font formats.</p></description>
<link>https://peppe.rs/posts/bye_bye_BDFs/</link>
<pubDate>Wed, 07 Aug 2019 12:31:00 +0000</pubDate>
<guid>https://peppe.rs/posts/bye_bye_BDFs/</guid>
</item>
<item>
<title>Onivim Sucks</title>
<description><p><a href="https://v2.onivim.io">Onivim</a> is a &#8216;modern modal editor&#8217;, combining fancy
interface and language features with vim-style modal editing. What&#39;s wrong you
ask?</p>

<p>Apart from <a href="https://github.com/onivim/oni2/issues/550">buggy syntax highlighting</a>, 
<a href="https://github.com/onivim/oni2/issues/519">broken scrolling</a> and
<a href="https://github.com/onivim/oni2/issues?q=is%3Aissue+label%3A%22daily+editor+blocker%22+is%3Aopen">others</a>,
Onivim is <strong>proprietary</strong> software. It is licensed under a commercial 
<a href="https://github.com/onivim/oni1/blob/master/Outrun-Labs-EULA-v1.1.md">end user agreement license</a>,
which prohibits redistribution in both object code and source code formats.</p>

<p>Onivim&#39;s core editor logic (bits that belong to vim), have been separated from
the interface, into <a href="https://github.com/onivim/libvim">libvim</a>. libvim is
licensed under MIT, which means, this &#8216;extension&#8217; of vim is perfectly in
adherence to <a href="http://vimdoc.sourceforge.net/htmldoc/uganda.html#license">vim&#39;s license text</a>! 
Outrun Labs are exploiting this loophole (distributing vim as a library) to
commercialize Onivim.</p>

<p>Onivim&#39;s source code is available on <a href="https://github.com/onivim/oni2">GitHub</a>.
They do mention that the source code trickles down to the
<a href="https://github.com/onivim/oni2-mit">oni2-mit</a> repository, which (not yet) contains
MIT-licensed code, <strong>18 months</strong> after each commit to the original repository.</p>

<p>Want to contribute to Onivim? Don&#39;t. They make a profit out of your contributions.
Currently, Onivim is priced at $19.99, &#8216;pre-alpha&#8217; pricing which is 80% off the
final price! If you are on the lookout for an editor, I would suggest using
<a href="https://vim.org">Vim</a>, charity ware that actually works, and costs $100 lesser.</p></description>
<link>https://peppe.rs/posts/onivim_sucks/</link>
<pubDate>Fri, 02 Aug 2019 12:31:00 +0000</pubDate>
<guid>https://peppe.rs/posts/onivim_sucks/</guid>
</item>
<item>
<title>Bash Harder With Vim</title>
<description><p>Bash is tricky, don&#39;t let your editor get in your way. Here&#39;s a couple of neat
additions you could make to your <code>vimrc</code> for a better shell programming
experience.</p>

<h3 id="Man%20pages%20inside%20vim">Man pages inside vim</h3>

<p>Source this script to get started:  </p>

<pre><code>runtime ftplugin&#47;man.vim
</code></pre>

<p>Now, you can open manpages inside vim with <code>:Man</code>! It adds nicer syntax highlighting
and the ability to jump around with <code>Ctrl-]</code> and <code>Ctrl-T</code>.</p>

<p>By default, the manpage is opened in a horizontal split, I prefer using a new tab:</p>

<pre><code>let g:ft_man_open_mode = &#39;tab&#39;
</code></pre>

<h3 id="Scratchpad%20to%20test%20your%20commands">Scratchpad to test your commands</h3>

<p>I often test my <code>sed</code> substitutions, here is
a sample from the script used to generate this site:  </p>

<pre><code># a substitution to convert snake_case to Title Case With Spaces
echo &#34;$1&#34; | sed -E -e &#34;s&#47;\..+$&#47;&#47;g&#34;  -e &#34;s&#47;_(.)&#47; \u\1&#47;g&#34; -e &#34;s&#47;^(.)&#47;\u\1&#47;g&#34;
</code></pre>

<p>Instead of dropping into a new shell, just test it out directly from vim!</p>

<ul>
<li><p>Yank the line into a register:</p>

<pre><code>yy
</code></pre></li>
<li><p>Paste it into the command-line window:</p>

<pre><code>q:p
</code></pre></li>
<li><p>Make edits as required:</p>

<pre><code>syntax off            # previously run commands
edit index.html       # in a buffer!
w | so %
!echo &#34;new_post.md&#34; | sed -E -e &#34;s&#47;\..+$&#47;&#47;g&#34;  --snip--
^--- note the use of &#39;!&#39;
</code></pre></li>
<li><p>Hit enter with the cursor on the line containing your command!</p>

<pre><code>$ vim
New Post         # output
Press ENTER or type command to continue
</code></pre></li>
</ul></description>
<link>https://peppe.rs/posts/bash_harder_with_vim/</link>
<pubDate>Wed, 31 Jul 2019 06:30:00 +0000</pubDate>
<guid>https://peppe.rs/posts/bash_harder_with_vim/</guid>
</item>
<item>
<title>Hold Position!</title>
<description><p>Often times, when I run a vim command that makes &#8220;big&#8221; changes to a file (a
macro or a <code>:vimgrep</code> command) I lose my original position and feel disoriented.</p>

<p><em>Save position with <code>winsaveview()</code>!</em></p>

<p>The <code>winsaveview()</code> command returns a <code>Dictionary</code> that contains information
about the view of the current window. This includes the cursor line number,
cursor coloumn, the top most line in the window and a couple of other values,
none of which concern us.</p>

<p>Before running our command (one that jumps around the buffer, a lot), we save
our view, and restore it once its done, with <code>winrestview</code>.</p>

<pre><code>let view = winsaveview()
s&#47;\s\+$&#47;&#47;gc              &#34; find and (confirm) replace trailing blanks
winrestview(view)        &#34; restore our original view!
</code></pre>

<p>It might seem a little overkill in the above example, just use `` (double
backticks) instead, but it comes in handy when you run your file through
heavier filtering.</p></description>
<link>https://peppe.rs/posts/hold_position!/</link>
<pubDate>Tue, 30 Jul 2019 12:31:00 +0000</pubDate>
<guid>https://peppe.rs/posts/hold_position!/</guid>
</item>
<item>
<title>Get Better At Yanking And Putting In Vim</title>
<description><ol start="1">
<li><p>reselecting previously selected text (i use this to fix botched selections):</p>

<pre><code>gv  &#34; :h gv for more
    &#34; you can use `o` in visual mode to go to the `Other` end of the selection
    &#34; use a motion to fix the selection
</code></pre></li>
<li><p>reselecting previously yanked text:</p>

<pre><code>`[v`]
`[         &#34; marks the beginning of the previously yanked text   :h `[
`]         &#34; marks the end                                       :h `]
 v         &#34; visual select everything in between

nnoremap gb `[v`]    &#34; &#34;a quick map to perform the above
</code></pre></li>
<li><p>pasting and indenting text (in one go):</p>

<pre><code>]p   &#34; put (p) and adjust indent to current line
]P   &#34; put the text before the cursor (P) and adjust indent to current line
</code></pre></li>
</ol></description>
<link>https://peppe.rs/posts/get_better_at_yanking_and_putting_in_vim/</link>
<pubDate>Mon, 29 Jul 2019 12:31:00 +0000</pubDate>
<guid>https://peppe.rs/posts/get_better_at_yanking_and_putting_in_vim/</guid>
</item>


    </channel>
</rss>
